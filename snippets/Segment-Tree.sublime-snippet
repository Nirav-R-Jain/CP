<snippet>
    <content><![CDATA[
class segment_tree{
public :
    vector<int> tree;
    int base = INT_MAX; // out of range.

    segment_tree(){
        tree.resize(4 * n);
        build(1, 1, n);
    }

    int join(int a, int b){
        return min(a, b);
    }

    void build(int node, int s, int e){
        if(s == e)
            tree[node] = v[s];
        else{
            int mid = s + ((e - s) / 2);
            build(2*node, s, mid);
            build(2*node+1, mid+1, e);
            tree[node] = join(tree[2*node], tree[2*node+1]);
        }
    }

    void print_tree(){
        cout << tree << '\n';
    }

    int query(int node, int s, int e, const int &l, const int &r){
        if(s >= l && e <= r) return tree[node];
        else if(e < l || s > r) return base;
        else{
            int mid = s + ((e - s) / 2);
            return join(query(2*node, s, mid, l, r), 
                        query(2*node+1, mid+1, e, l, r));
        }
    }

    void value_update(int node, int s, int e,
                         const int &index, const int &value){
        if(s == index && e == index)
            tree[node] = join(tree[node], value); // change value
        else{
            int mid = s + ((e - s) / 2);
            if(index <= mid) value_update(2*node, s, mid, index, value);
            else value_update(2*node+1, mid+1, e, index, value);
            tree[node] = join(tree[2*node], tree[2*node+1]);
        }
    }

    void range_update(int node, int s, int e, 
                        const int &l, const int &r, const int &value){
        if(s == e)
            if(s >= l && s <= r)
                tree[node] = join(tree[node], value);
        else{
            int mid = s + ((e - s) / 2);
            // left part
            if(l <= mid){
                range_update(2*node, s, mid, l, r, value);
            }
            // right part
            if(r >= mid){
                range_update(2*node+1, mid+1, e, l, r, value);
            }
            tree[node] = join(tree[2*node], tree[2*node+1]);
        }
    }

    // 1 as a root, node = 1, s = 1/0, e = n/n-1
    // #pragma message("1-indexed, be careful")
    // copy: segment_tree sgt;
};]]></content>
    <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
    <tabTrigger>SEGMENTTREE</tabTrigger>
    <!-- Optional: Set a scope to limit where the snippet will trigger -->
    <scope>source.c++</scope>
    <!-- check doc for details. -->
</snippet>
