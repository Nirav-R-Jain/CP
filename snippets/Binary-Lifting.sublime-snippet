<snippet>
    <content><![CDATA[
struct binaryLifting {
    // create using binaryLifting bl(1);

    int bit, timer;
    vector<int> tin, tout;
    vector<vector<int>> up;

    binaryLifting(int root) {
        tin.resize(n + 1);
        tout.resize(n + 1);
        timer = 0;
        bit = ceil(log2(n + 1));
        up.assign(n + 1, vector<int>(bit + 1));
        dfs(root, root);
    }

    void dfs(int from, int par) {
        tin[from] = ++timer;
        up[from][0] = par;

        for(int i = 1; i <= bit; ++i){
            up[from][i] = up[up[from][i-1]][i-1];
        }

        for(auto &to : g[from]) {
            if(to == par) continue;
            dfs(to, from);
        }

        tout[from] = timer;
    }

    bool is_ancestor(int u, int v) {
        return tin[u] <= tin[v] && tout[u] >= tout[v];
    }

    int lca(int u, int v) {
        // O(logn), using binary_search
        if (is_ancestor(u, v)) return u;
        if (is_ancestor(v, u)) return v;

        for (int i = bit; i >= 0; --i) {
            if (!is_ancestor(up[u][i], v))
                u = up[u][i];
        }

        return up[u][0];
    }

    int jump(int from, int step) {
        // to jump above.
        assert(step <= (1ll << bit));
        for(int i = 0; i <= bit; i++){
            if((step >> i) & 1) from = up[from][i];
        }
        return from;
    }

    // #pragma message("1 based indexing, be careful")
};]]></content>
    => refer cp-algorithm for more details.
    <description>binary lifting implementation</description>
    <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
    <tabTrigger>BINARY-LIFTING</tabTrigger>
    <!-- Optional: Set a scope to limit where the snippet will trigger -->
    <!-- <scope>source.python</scope> -->
</snippet>
