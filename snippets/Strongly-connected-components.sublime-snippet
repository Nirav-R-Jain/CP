<snippet>
    <content><![CDATA[
struct SCC{
    vector<vector<int>> edges, redges;
    vector<bool> used;
    vector<int> order, component;
    int n;

    SCC(int _n){
        n = _n;
        edges = vector<vector<int>>(n);
        redges = vector<vector<int>>(n);
        order.clear();
        component.clear();
    }

    void edge(int u, int v){
        edges[u].push_back(v);
        redges[v].push_back(u);
    }

    void dfs1(int v){
        used[v] = true;
        for(int i = 0; i < edges[v].size(); i++){
            if(!used[edges[v][i]]){
                dfs1(edges[v][i]);
            }
        }
        order.push_back(v);
    }

    void dfs2(int v){
        used[v] = true;
        component.push_back(v);
        for(int i = 0; i < redges[v].size(); i++){
            if(!used[redges[v][i]]){
                dfs2(redges[v][i]);
            }
        }
    }

    vector<vector<int>> run(){
        vector<vector<int>> components;
        used.assign(n, false);
        for(int i = 0; i < n; i++){
            if(!used[i]){
                dfs1(i);
            }
        }

        used.assign(n, false);
        for(int i = 0; i < n; i++){
            int v = order[n - 1 - i];
            if(!used[v]){
                dfs2(v);
                components.push_back(component);
                component.clear();
            }
        }

        return components;
    }

    // #pragma message("1-based indexing, be careful");
    // copy: SCC scc_obj(n);
};]]></content>
    // source : https://github.com/galencolin/cp-templates/blob/master/templates/scc.cpp
    // refer cp - algorithm
    <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
    <tabTrigger>SCC</tabTrigger>
    <!-- Optional: Set a scope to limit where the snippet will trigger -->
    <scope>source.c++, source.cpp</scope>
</snippet>
